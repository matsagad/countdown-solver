{"version":3,"sources":["components/Button.js","components/NumberCard.js","components/NumberBoard.js","components/WhiteBoard.js","ValueExpPair.js","components/Board.js","App.js","reportWebVitals.js","index.js"],"names":["Button","className","onClick","text","NumberCard","props","useState","isTarget","value","setValue","val","type","num","strNum","String","length","padThreeZeros","onInput","event","target","onChange","newValue","parseInt","defaultProps","numbersMap","NumberBoard","targetChange","randomizeTarget","n","Math","floor","random","setTimeout","map","i","WhiteBoard","style","transform","expression","config","loader","load","tex","packages","inlineMath","displayMath","version","inline","dynamic","ValueExpPair","values","expressions","this","pair","opLookup","a","b","Board","setTarget","nums","setNums","expr","setExpr","combinations","findCombinations","closest","found","exprTable","nCr","r","res","combToKey","comb","join","arr","Array","fill","e1","filter","e2","j","sort","x","y","slice","findAllExpressions","pair1","pair2","newExprs","getAllArrangements","newVals","pn","concat","seen","count","indexOf","isFinite","Number","isInteger","abs","push","splice","processPair","exp1","exp2","numbers","console","log","len","start","end","subCombs","k","concatWith","processByChunks","numStack","op","right","pop","left","rightPart","leftPart","processExpression","key","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3019e8d3.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\n\nconst Button = ({className, onClick, text}) => {\n  return (\n    <button onClick={onClick} className={'Button ' + className}>\n      {text}\n    </button> \n  );\n}\n\nButton.propTypes = {\n  text: PropTypes.string,\n  onClick: PropTypes.func,\n}\n\nexport default Button;","import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction NumberCard(props) {\n  const [value, setValue] = useState(props.isTarget ? 0 : -1);\n  function padThreeZeros(num) {\n    let strNum = String(num);\n    while (strNum.length < 3) {\n      strNum = '0' + strNum;\n    }\n    return strNum;\n  }\n  function displayValue(val) {\n    return props.isTarget ? padThreeZeros(val) : (val >= 0 ? String(val) : '');\n  }\n  const inputHandler = (event) => {\n    if (event.target.value === '') {\n      setValue(-1);\n      props.onChange(-1);\n      return;\n    } \n    let newValue = parseInt(event.target.value);\n    if (0 <= newValue && newValue <= 999) {\n      setValue(newValue);\n      props.onChange(newValue);\n    }\n  }\n  return (\n    <input \n      type='tel'\n      value={displayValue(props.isTarget ? props.value : value)}\n      onInput={inputHandler}\n      className={'NumberCard ' + (props.isTarget ? 'Target' : (value >= 0 ? '' : 'Empty'))}\n    />\n  );\n}\n\nNumberCard.defaultProps = {\n  isTarget: false,\n  value: -1,\n}\n\nNumberCard.propTypes = {\n  isTarget: PropTypes.bool,\n  value: PropTypes.number,\n}\n\nexport default NumberCard;","import PropTypes from 'prop-types';\nimport Button from './Button';\nimport NumberCard from './NumberCard';\n\nconst numbersMap = [0, 1, 2, 3, 4, 5]\n\nconst NumberBoard = ({ target, targetChange, onChange }) => {\n  function randomizeTarget(n) {\n    if (n > 0) {\n      targetChange(Math.floor(Math.random() * 898) + 101);\n      setTimeout(() => randomizeTarget(n - 1), 75);\n    }\n  }\n  return (\n    <div className='NumberBoard'>\n      <NumberCard value={target} isTarget={true} onChange={val => targetChange(val)} />\n      <div>\n        <Button className='Randomizer' onClick={() => randomizeTarget(10)} />\n        {numbersMap.map(i => {return <NumberCard key={i} onChange={val => onChange(i, val)} />})}\n      </div>\n    </div>\n  );\n}\n\nNumberBoard.propTypes = {\n  target: PropTypes.number,\n  targetChange: PropTypes.func,\n  onChange: PropTypes.func,\n}\n\nexport default NumberBoard;","import PropTypes from 'prop-types';\nimport { MathJax, MathJaxContext } from \"better-react-mathjax\";\n\nfunction WhiteBoard(props) {\n  const config = {\n    loader: { load: [\"[tex]/html\"] },\n    tex: {\n      packages: { \"[+]\": [\"html\"] },\n      inlineMath: [[\"$\", \"$\"]],\n      displayMath: [[\"$$\", \"$$\"]],\n    }\n  };\n  return (\n    <div className='WhiteBoard'>\n      <span className='dot' style={{transform: 'translate(2.25vmin, 4.5vmin)'}}></span>\n      <span className='dot' style={{transform: 'translate(77.25vmin, 4.5vmin)'}}></span>\n      <span className='dot' style={{transform: 'translate(2.25vmin, 39.5vmin)'}}></span>\n      <span className='dot' style={{transform: 'translate(77.25vmin, 39.5vmin)'}}></span>\n      <div className={'Expression ' + (props.expression === '' ? 'Hidden' : '')}>\n        <MathJaxContext config={config} version={3}>\n          <MathJax inline dynamic>\n            {`$$\\\\color{#4c282f}{${props.expression}}$$`}\n          </MathJax>\n        </MathJaxContext>\n      </div>\n    </div>\n  );\n}\n\nWhiteBoard.defaultProps = {\n  expression: '',\n}\n\nWhiteBoard.propTypes = {\n  expression: PropTypes.string,\n}\n\nexport default WhiteBoard;","class ValueExpPair {\n  constructor(values, expressions) {\n    this.values = values;\n    this.expressions = expressions;\n  }\n  concatWith(pair) {\n    this.values = [...this.values, ...pair.values];\n    this.expressions = [...this.expressions, ...pair.expressions];\n  }\n}\n\nexport default ValueExpPair;","import { useState } from 'react';\nimport Button from './Button';\nimport NumberBoard from './NumberBoard';\nimport WhiteBoard from './WhiteBoard';\nimport ValueExpPair from '../ValueExpPair';\n\nconst opLookup = {'+': (a, b) => a + b, '-': (a, b) => b - a, '*': (a, b) => a * b, '/': (a, b) => b / a};\n\nfunction Board() {\n  const [target, setTarget] = useState(0);\n  const [nums, setNums] = useState([-1, -1, -1, -1, -1, -1]);\n  const [expr, setExpr] = useState('');\n  const combinations = findCombinations([0, 1, 2, 3, 4, 5]);\n  var closest = { value: -1, expression: '' };\n  var found = false;\n  var exprTable = {};\n\n  // Method - Split into smaller chunks, find all possible values for each chunk and combine\n  function processByChunks(numbers) {\n    let len = numbers.length;\n    for (let i = 0; i < len; i++) {\n      exprTable[combToKey([i])] = new ValueExpPair([nums[i]], [nums[i]]);\n    }\n    let start = 0;\n    let end = nCr(len, 1) - 1;\n    for (let i = 1; i < len; i++) {\n      start += nCr(len, i);\n      end += nCr(len, i + 1);\n      for (let j = start; j < end + 1; j++) {\n        if (found) {\n          break;\n        }\n        let res = new ValueExpPair([], []);\n        let subCombs = findCombinations(combinations[j]);\n        for (let k = 0; subCombs[k].length <= Math.floor(combinations[j].length / 2) && !found; k++) {\n          let exp1 = exprTable[combToKey(subCombs[k])];\n          let exp2 = exprTable[combToKey(combinations[j].filter((x) => subCombs[k].indexOf(x) < 0))];\n          res.concatWith(findAllExpressions(exp1, exp2));\n        }\n        exprTable[combToKey(combinations[j])] = res;\n      }\n    }\n  }\n\n  function nCr(n, r) {\n    if (2 * r > n) {\n      r = n - r;\n    }\n    let res = 1;\n    for (let i = 1; i < r + 1; i++) {\n      res *= n - r + i;\n      res /= i;\n    }\n    return res;\n  }\n\n  function combToKey(comb) {\n    return comb.join('');\n  }\n\n  function findCombinations(arr){\n    // adapted from: https://stackoverflow.com/a/42531964\n    return new Array(1 << arr.length).fill().map((e1, i) => arr.filter((e2, j) => i & (1 << j))).sort((x, y) => x.length - y.length).slice(1);\n  }\n\n  function findAllExpressions(pair1, pair2) {\n    if (found) {\n      return new ValueExpPair([], []);\n    }\n    let values = [];\n    let expressions = [];\n    for (let i = 0; i < pair1.values.length; i++) {\n      for (let j = 0; j < pair2.values.length; j++) {\n        let newExprs = getAllArrangements(pair1.expressions[i], pair2.expressions[j]);\n        let newVals = getAllArrangements(pair1.values[i], pair2.values[j]).map((pn) => opLookup[pn[0]](pn[1], pn[2]));\n        values = values.concat(newVals);\n        expressions = expressions.concat(newExprs);\n      } \n    }\n    return processPair(new ValueExpPair(values, expressions));\n  }\n\n  function processPair(pair) {\n    let values = pair.values;\n    let expressions = pair.expressions;\n    let seen = [];\n    let count = 0;\n    for (let i = 0; i < values.length; i++) {\n      if (seen.indexOf(values[i]) < 0 && isFinite(values[i]) && (values[i] >= 0) && (Number.isInteger(values[i]))) {\n        let value = values[i];\n        if (Math.abs(value - target) < Math.abs(closest.value - target)) {\n          closest.value = value;\n          closest.expression = expressions[i - count];\n          if (value === target) {\n            found = true;\n            break;\n          }\n        } \n        seen.push(value);\n      } else {\n        expressions.splice(i - count, 1);\n        count += 1;\n      }\n    }\n    return new ValueExpPair(seen, expressions);\n  }\n\n  function getAllArrangements(exp1, exp2) {\n    return [['+'].concat(exp1).concat(exp2), ['-'].concat(exp1).concat(exp2), ['-'].concat(exp2).concat(exp1), \n        ['*'].concat(exp1).concat(exp2), ['/'].concat(exp1).concat(exp2), ['/'].concat(exp2).concat(exp1)];\n  }\n\n  function processExpression(pn) {\n    let numStack = [];\n    for (let i = pn.length - 1; i > -1; i--) {\n      if (typeof(pn[i]) == 'number') {\n        numStack.push({ value: pn[i], op: -1 });\n      } else {\n        let right = numStack.pop();\n        let left = numStack.pop();\n        switch(pn[i]) {\n          case '+':\n            numStack.push({ value: left.value + '+' + right.value, op: 0 });\n            break;\n          case '-': {\n            let rightPart = 0 <= right.op && right.op <= 1 ? '\\\\left(' + right.value + '\\\\right)' : right.value;\n            numStack.push({ value: left.value + '-' + rightPart, op: 1 });\n            break;\n          }\n          case '*': {\n            let leftPart = 0 <= left.op && left.op <= 1 ? '\\\\left(' + left.value + '\\\\right)' : left.value;\n            let rightPart = 0 <= right.op && right.op <= 1 ? '\\\\left(' + right.value + '\\\\right)' : right.value;\n            numStack.push({ value: leftPart + '\\\\times' + rightPart, op: 2 });\n            break;\n          }\n          case '/':\n            numStack.push({ value: '\\\\frac{' + left.value + '}{' + right.value +'}', op: 3 });\n            break;\n          default:\n            break;\n        }\n      }\n    }\n    return numStack[numStack.length - 1].value;\n  }\n\n  function solveExpression() {\n    var numbers = []\n    for (let i = 0; i < 6; i++) {\n      if (nums[i] < 0) {\n        console.log('Missing Card #' + (i + 1));\n        return;\n      }\n      numbers.push(nums[i]);\n    }\n    found = false;\n    closest = { value: numbers[0], expression: numbers[0] };\n    exprTable = { '' : new ValueExpPair([], []) };\n    processByChunks(numbers);\n    setExpr(closest.value + '=' + processExpression(closest.expression));\n  }\n\n  function updateNumbers(key, value) {\n    setNums({ ...nums, [key]: value });\n  }\n\n  return (\n    <div className='Board'>\n      <Button className='Solve' onClick={solveExpression} text='SOLVE' />\n      <WhiteBoard expression={expr} />\n      <NumberBoard target={target} targetChange={setTarget} onChange={updateNumbers} />\n    </div>\n  );\n}\n\nexport default Board;","import Board from './components/Board'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='container'>\n      <Board />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}